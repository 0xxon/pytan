{
    "get_action_single_by_id": {
        "method": "get",
        "args": {"objtype": "action", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.ActionList)",
            "all([isinstance(x, taniumpy.Action) for x in response])"
        ]
    },
    "get_group_single_by_name": {
        "method": "get",
        "args": {"objtype": "group", "name": "All Computers"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.GroupList)",
            "all([isinstance(x, taniumpy.Group) for x in response])"
        ]
    },
    "get_package_single_by_name": {
        "method": "get",
        "args": {"objtype": "package", "name": "Distribute Patch Tools"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.PackageSpecList)",
            "all([isinstance(x, taniumpy.PackageSpec) for x in response])"
        ]
    },
    "get_question_single_by_id": {
        "method": "get",
        "args": {"objtype": "question", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.QuestionList)",
            "all([isinstance(x, taniumpy.Question) for x in response])"
        ]
    },
    "get_saved_action_single_by_name": {
        "method": "get",
        "args": {
            "objtype": "saved_action",
            "name": "Distribute Tanium Standard Utilities"
        },
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SavedActionList)",
            "all([isinstance(x, taniumpy.SavedAction) for x in response])"
        ]
    },
    "get_saved_question_single_by_name": {
        "method": "get",
        "args": {
            "objtype": "saved_question",
            "name": "Installed Applications"
        },
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SavedQuestionList)",
            "all([isinstance(x, taniumpy.SavedQuestion) for x in response])"
        ]
    },
    "get_saved_question_multiple": {
        "method": "get",
        "args": {
            "objtype": "saved_question",
            "name": ["Installed Applications", "Computer Name"]
        },
        "tests": [
            "len(response) == 2",
            "isinstance(response, taniumpy.SavedQuestionList)",
            "all([isinstance(x, taniumpy.SavedQuestion) for x in response])"
        ]
    },
    "get_sensor_single_by_name": {
        "method": "get",
        "args": {"objtype": "sensor", "name": "Computer Name"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_sensor_single_by_id": {
        "method": "get",
        "args": {"objtype": "sensor", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_sensor_single_by_hash": {
        "method": "get",
        "args": {"objtype": "sensor", "hash": "322086833"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_sensor_multiple": {
        "method": "get",
        "args": {
            "objtype": "sensor",
            "name": ["Computer Name", "Action Statuses"]
        },
        "tests": [
            "len(response) == 2",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_sensor_multiple_selectors": {
        "method": "get",
        "args": {
            "objtype": "sensor",
            "name": ["Computer Name"],
            "id": [1, 2],
            "hash": ["322086833"]
        },
        "tests": [
            "len(response) == 4",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_setting_single_by_name": {
        "method": "get",
        "args": {"objtype": "setting", "name": "control_address"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.SystemSettingsList)",
            "all([isinstance(x, taniumpy.SystemSetting) for x in response])"
        ]
    },
    "get_user_single_by_id": {
        "method": "get",
        "args": {"objtype": "user", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.UserList)",
            "all([isinstance(x, taniumpy.User) for x in response])"
        ]
    },
    "get_user_single_by_name": {
        "method": "get",
        "args": {"objtype": "user", "name": "Tanium User"},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.UserList)",
            "all([isinstance(x, taniumpy.User) for x in response])"
        ]
    },
    "get_userrole_single_by_id": {
        "method": "get",
        "args": {"objtype": "userrole", "id": 1},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.UserRoleList)",
            "all([isinstance(x, taniumpy.UserRole) for x in response])"
        ]
    },
    "get_whitelisted_url_single_by_id": {
        "method": "get",
        "args": {"objtype": "whitelisted_url", "id": 4},
        "tests": [
            "len(response) == 1",
            "isinstance(response, taniumpy.WhiteListedUrlList)",
            "all([isinstance(x, taniumpy.WhiteListedUrl) for x in response])"
        ]
    },
    "get_leader_clients": {
        "method": "get",
        "args": {"objtype": "client", "status": "Leader"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SystemStatusList)",
            "all([isinstance(x, taniumpy.ClientStatus) for x in response])"
        ]
    },
    "get_all_actions": {
        "method": "get_all",
        "args": {"objtype": "action"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.ActionList)",
            "all([isinstance(x, taniumpy.Action) for x in response])"
        ]
    },
    "get_all_clients": {
        "method": "get_all",
        "args": {"objtype": "client"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SystemStatusList)",
            "all([isinstance(x, taniumpy.ClientStatus) for x in response])"
        ]
    },
    "get_all_groups": {
        "method": "get_all",
        "args": {"objtype": "group"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.GroupList)",
            "all([isinstance(x, taniumpy.Group) for x in response])"
        ]
    },
    "get_all_packages": {
        "method": "get_all",
        "args": {"objtype": "package"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.PackageSpecList)",
            "all([isinstance(x, taniumpy.PackageSpec) for x in response])"
        ]
    },
    "get_all_questions": {
        "method": "get_all",
        "args": {"objtype": "question"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.QuestionList)",
            "all([isinstance(x, taniumpy.Question) for x in response])"
        ]
    },
    "get_all_saved_actions": {
        "method": "get_all",
        "args": {"objtype": "saved_action"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SavedActionList)",
            "all([isinstance(x, taniumpy.SavedAction) for x in response])"
        ]
    },
    "get_all_saved_questions": {
        "method": "get_all",
        "args": {"objtype": "saved_question"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SavedQuestionList)",
            "all([isinstance(x, taniumpy.SavedQuestion) for x in response])"
        ]
    },
    "get_all_sensors": {
        "method": "get_all",
        "args": {"objtype": "sensor"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SensorList)",
            "all([isinstance(x, taniumpy.Sensor) for x in response])"
        ]
    },
    "get_all_settings": {
        "method": "get_all",
        "args": {"objtype": "setting"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.SystemSettingsList)",
            "all([isinstance(x, taniumpy.SystemSetting) for x in response])"
        ]
    },
    "get_all_users": {
        "method": "get_all",
        "args": {"objtype": "user"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.UserList)",
            "all([isinstance(x, taniumpy.User) for x in response])"
        ]
    },
    "get_all_userroless": {
        "method": "get_all",
        "args": {"objtype": "userrole"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.UserRoleList)",
            "all([isinstance(x, taniumpy.UserRole) for x in response])"
        ]
    },
    "get_all_whitelisted_urls": {
        "method": "get_all",
        "args": {"objtype": "whitelisted_url"},
        "tests": [
            "len(response) >= 1",
            "isinstance(response, taniumpy.WhiteListedUrlList)",
            "all([isinstance(x, taniumpy.WhiteListedUrl) for x in response])"
        ]
    }
}
